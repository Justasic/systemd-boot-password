#!/bin/bash

BOOT_LIB_DIR='@BOOT_LIB_DIR@'
EFI_MACHINE_TYPE_NAME='@EFI_MACHINE_TYPE_NAME@'

EFI_DEFAULT="/EFI/BOOT/BOOT${EFI_MACHINE_TYPE_NAME^^}.EFI"
EFI_SBP="/EFI/systemd/systemd-boot$EFI_MACHINE_TYPE_NAME.efi"

DB_KEY='/etc/sbp/db.key'
DB_CERT='/etc/sbp/db.crt'
CONFIG='/etc/sbp/loader.conf'

function checkroot() {
  [ "`id -u`" -eq 0 ] || {
    echo 'You should start this script as root.' >&2
    return 1
  }
}

function checksign() {
  which sbsign > /dev/null 2> /dev/null || {
    echo 'sbsign is not found.' >&2
    return 1
  }

  for f in "$DB_KEY" "$DB_CERT"; do
    [ -f "$f" ] || {
      echo "$f is not exist." >&2
      return 1
    }
  done
}

function sign() {
  sbsign --key "$DB_KEY" --cert "$DB_CERT" --output "$1" "$1" || {
    echo 'Can not sign EFI application.' >&2
    return 1
  }
}

function readargs() {
  opts_count="$1"
  vals_count="$2"
  shift 2

  declare -A opts_long
  declare -A opts_short
  declare -A opts_add_vals

  for arg in "${@:1:$opts_count}"; do
    IFS=':' read -a arge <<< "$arg"
    arg="${arge[0]}"
    opts_long["$arg"]="$arg"
    opts_short["${arg:0:1}"]="$arg"

    [ -n "${arge[1]}" ] &&
    opts_add_vals["$arg"]="${arge[1]}"
  done

  shift "$opts_count"
  opts_end=

  while arg="$1"; shift; do
    case "$arg" in
      --*)
        [ -n "$opts_end" ] && {
          readargs_vals+=("$arg")
          continue
        }

        [ "$arg" = '--' ] && {
          opts_end=1
          continue
        }

        arg="${arg:2}"
        [ -n "${opts_long["$arg"]}" ] && {
          readargs_opts["$arg"]="$arg"
        } || {
          echo "Unknown attribute: \"$arg\"." >&2
          return 1
        }
        ;;
      -*)
        [ -n "$opts_end" ] && {
          readargs_vals+=("$arg")
          continue
        }

        [ "$arg" = '-' ] && {
          echo 'Unknown attribute: "-".' >&2
          return 1
        }

        while arg="${arg:1}"; [ -n "$arg" ]; do
          short_arg="${arg:0:1}"
          long_arg="${opts_short["$short_arg"]}"

          [ -n "$long_arg" ] && {
            readargs_opts["$long_arg"]="$long_arg"
          } || {
            echo "Unknown attribute: \"$short_arg\"." >&2
            return 1
          }
        done
      ;;
      *)
        readargs_vals+=("$arg")
        ;;
    esac
  done

  for opt in "${readargs_opts[@]}"; do
    opt_add_vals="${opts_add_vals["$opt"]}"
    [ -n "$opt_add_vals" ] &&
    ((vals_count+="$opt_add_vals"))
  done

  [ "${#readargs_vals[@]}" -ne "$vals_count" ] && {
    echo "Invalid arguments count: expected $vals_count, got ${#readargs_vals[@]}." >&2
    return 1
  }

  return 0
}

shopt -s expand_aliases
alias readargs='unset readargs_opts
unset readargs_vals
declare -A readargs_opts
declare -a readargs_vals
readargs'

case "$1" in
  install)
    shift
    checkroot || exit 1
    readargs 3 1 default include sign "$@" || exit 1

    default="${readargs_opts[default]}"
    include="${readargs_opts[include]}"
    sign="${readargs_opts[sign]}"
    esp="${readargs_vals[0]}"

    [ -n "$include" ] && {
      [ -e "$CONFIG" ] || {
        echo "$CONFIG is not exist." >&2
        exit 1
      }
    }

    [ -n "$sign" ] && {
      checksign || exit 1
    }

    [ -n "$esp" ] || {
      echo 'Please provide ESP path.' >&2
      exit 1
    }

    [ -d "$esp" ] || {
      echo 'ESP path is not a directory.' >&2
      exit 1
    }

    efi="$BOOT_LIB_DIR/systemd-boot$EFI_MACHINE_TYPE_NAME.efi"

    function bootmkdir() {
      dir=`dirname "$1"`
      [ -d "$dir" ] || mkdir -p "$dir" || {
        echo "$2" >&2
        return 1
      }
    }

    bootmkdir "$esp$EFI_DEFAULT" 'Can not create EFI/BOOT directory.' || exit 1
    [ -n "$include" ] && {
      objcopy --add-section .config="$CONFIG" --change-section-vma .config=0x20000 \
      "$efi" "$esp$EFI_DEFAULT" || {
        echo 'Can not copy EFI application.' >&2
        exit 1
      }
    } || {
      cp "$efi" "$esp$EFI_DEFAULT" || {
        echo 'Can not copy EFI application.' >&2
        exit 1
      }
    }

    [ -n "$sign" ] && {
      sign "$esp$EFI_DEFAULT" || exit 1
    }

    [ -z "$default" ] && {
      bootmkdir "$esp$EFI_SBP" 'Can not create EFI/systemd directory.' || exit 1
      cp "$esp$EFI_DEFAULT" "$esp$EFI_SBP" || {
        echo 'Can not copy EFI application.' >&2
        exit 1
      }
    }

    echo 'Success.'
    ;;
  standalone)
    shift
    readargs 2 3 include:2 sign "$@" || exit 1

    include="${readargs_opts[include]}"
    sign="${readargs_opts[sign]}"

    vals_start=0
    osrel=
    cmdline=
    [ -n "$include" ] && {
      ((vals_start+=2))
      osrel="${readargs_vals[0]}"
      cmdline="${readargs_vals[1]}"
    }

    initrd="${readargs_vals[(($vals_start))]}"
    efi="${readargs_vals[(($vals_start+1))]}"
    output="${readargs_vals[(($vals_start+2))]}"

    [ -n "$sign" ] && {
      checksign || exit 1
    }

    [ -n "$include" ] && {
      objcopy --add-section .osrel="$osrel" --change-section-vma .osrel=0x20000 \
      --add-section .cmdline="$cmdline" --change-section-vma .cmdline=0x30000 \
      --add-section .linux="$efi" --change-section-vma .linux=0x40000 \
      --add-section .initrd="$initrd" --change-section-vma .initrd=0x3000000 \
      "$BOOT_LIB_DIR/linux$EFI_MACHINE_TYPE_NAME.efi.stub" "$output" || {
        echo 'Can not create EFI application.' >&2
        exit 1
      }
    } || {
      objcopy --add-section .linux="$efi" --change-section-vma .linux=0x40000 \
      --add-section .initrd="$initrd" --change-section-vma .initrd=0x3000000 \
      "$BOOT_LIB_DIR/linux$EFI_MACHINE_TYPE_NAME.efi.stub" "$output" || {
        echo 'Can not create EFI application.' >&2
        exit 1
      }
    }

    [ -n "$sign" ] && {
      sign "$output" || exit 1
    }

    echo 'Success.'
    ;;
  generate)
    function hash() {
      echo -n "$1: " >&2
      read -s password
      echo >&2

      filtered=`echo "$password" | grep -Po '[\x00-\x7f]*'`
      [ "$password" = "$filtered" ] || {
        echo 'Only non-unicode characters are allowed.' >&2
        return 1
      }

      echo -n "$password" | sha512sum | grep -Po [0-9a-fA-F]{128}
    }

    hash1=`hash 'Enter password'` || exit 1
    hash2=`hash 'Retype password'` || exit 1

    [ "$hash1" = "$hash2" ] && {
      echo "password $hash1"
      exit 0
    } || {
      echo 'Passwords do not match.' >&2
      exit 1
    }
    ;;
  *)
    [ -n "$1" ] &&
    echo "Unknown command: \"$1\"." >&2 ||
    echo 'No attributes provided.' >&2
    ;;
esac
